import discord
from discord.ui import Modal, TextInput, View
from discord import app_commands
import os
import re
import asyncio
from datetime import datetime

# CONFIGURA√á√ÉO DO BOT
intents = discord.Intents.all()
bot = discord.Client(intents=intents)
tree = app_commands.CommandTree(bot)

# MODAL PARA SOLICITA√á√ÉO DE PORTE
class PorteModal(Modal, title='üìã Solicita√ß√£o de Porte de Arma - TJ'):
    advogado = TextInput(
        label='Nome Completo do Advogado',
        placeholder='Ex: Dr. Silva OAB/SP-12345',
        style=discord.TextStyle.short,
        required=True,
        max_length=50
    )
    
    cliente = TextInput(
        label='Nome Completo do Cliente',
        placeholder='Ex: Jo√£o Costa',
        style=discord.TextStyle.short,
        required=True,
        max_length=50
    )
    
    passaporte = TextInput(
        label='N√∫mero do Passaporte',
        placeholder='Ex: 123456789 (apenas n√∫meros)',
        style=discord.TextStyle.short,
        required=True,
        max_length=11
    )
    
    motivo = TextInput(
        label='Motivo da Solicita√ß√£o',
        placeholder='Descreva detalhadamente o motivo do porte...',
        style=discord.TextStyle.paragraph,
        required=True,
        max_length=500
    )

    async def on_submit(self, interaction: discord.Interaction):
        # VALIDA√á√ÉO DO PASSAPORTE
        passaporte_limpo = re.sub(r'[\.\-\s]', '', self.passaporte.value)
        
        if not passaporte_limpo.isdigit():
            await interaction.response.send_message(
                '‚ùå **PASSAPORTE INV√ÅLIDO!**\nDeve conter apenas n√∫meros (0-9)',
                ephemeral=True
            )
            return
            
        if len(passaporte_limpo) > 11:
            await interaction.response.send_message(
                '‚ùå **PASSAPORTE INV√ÅLIDO!**\nM√°ximo 11 d√≠gitos permitidos',
                ephemeral=True
            )
            return
        
        # VERIFICA SE JUIZ EST√Å SOLICITANDO PR√ìPRIO PORTE
        cargos_usuario = [role.name for role in interaction.user.roles]
        nome_usuario = interaction.user.display_name
        
        if "Juiz" in cargos_usuario and self.advogado.value == nome_usuario and self.cliente.value == nome_usuario:
            await interaction.response.send_message(
                '‚ùå **SOLICITA√á√ÉO BLOQUEADA!**\n'
                'Ju√≠zes n√£o podem solicitar **pr√≥prio porte** diretamente.\n'
                'üìã **Solu√ß√£o:** Pe√ßa a um **advogado** para solicitar seu porte.',
                ephemeral=True
            )
            return
        
        # GERAR PROTOCOLO
        protocolo = f"PORT-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
        
        # CONFIRMA√á√ÉO DE RECEBIMENTO
        await interaction.response.send_message(
            f'‚úÖ **SOLICITA√á√ÉO REGISTRADA COM SUCESSO!**\n\n'
            f'**üìã Protocolo:** `{protocolo}`\n'
            f'**üë®‚Äçüíº Advogado:** {self.advogado.value}\n'
            f'**üë§ Cliente:** {self.cliente.value}\n'
            f'**üÜî Passaporte:** {self.passaporte.value}\n'
            f'**üìù Motivo:** {self.motivo.value}\n\n'
            f'‚è≥ **Status:** Em an√°lise pelo Tribunal',
            ephemeral=False
        )

# VIEW PARA DECIS√ÉO DO JUIZ
class DecisaoView(View):
    def __init__(self, protocolo, fundamentacao):
        super().__init__(timeout=120)
        self.protocolo = protocolo
        self.fundamentacao = fundamentacao
    
    @discord.ui.button(label='‚úÖ DEFERIR', style=discord.ButtonStyle.success, emoji='‚úÖ')
    async def deferir(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.registrar_decisao(interaction, 'DEFERIDO')
    
    @discord.ui.button(label='‚ùå INDEFERIR', style=discord.ButtonStyle.danger, emoji='‚ùå')
    async def indeferir(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.registrar_decisao(interaction, 'INDEFERIDO')
    
    @discord.ui.button(label='‚è∏Ô∏è ADIAR', style=discord.ButtonStyle.secondary, emoji='‚è∏Ô∏è')
    async def adiar(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(
            f'‚è∏Ô∏è **AN√ÅLISE ADIADA**\n**Processo:** {self.protocolo}\n'
            f'üìã Retornar√° para an√°lise posterior.',
            ephemeral=False
        )
        self.stop()
    
    async def registrar_decisao(self, interaction: discord.Interaction, decisao):
        data_hora = datetime.now().strftime("%d/%m/%Y √†s %H:%M")
        
        await interaction.response.send_message(
            f'‚öñÔ∏è **DECIS√ÉO JUDICIAL REGISTRADA**\n\n'
            f'**Processo:** {self.protocolo}\n'
            f'**Decis√£o:** {decisao}\n'
            f'**Juiz:** {interaction.user.display_name}\n'
            f'**Data e Hora:** {data_hora}\n\n'
            
            f'‚úÖ **DOCUMENTOS VERIFICADOS:**\n'
            f'‚Ä¢ Laudo psicol√≥gico: ‚úÖ V√ÅLIDO\n'
            f'‚Ä¢ Antecedentes criminais: ‚úÖ CONFERIDO\n' 
            f'‚Ä¢ Documenta√ß√£o pessoal: ‚úÖ REGULAR\n\n'
            
            f'üìù **FUNDAMENTA√á√ÉO:**\n'
            f'_{self.fundamentacao}_\n\n'
            
            f'üîè **Registro oficial:** TJ-{self.protocolo}-{decisao}',
            ephemeral=False
        )
        self.stop()

# MODAL PARA AN√ÅLISE DO JUIZ
class AnaliseModal(Modal, title='‚öñÔ∏è An√°lise de Processo - TJ'):
    def __init__(self, protocolo):
        super().__init__()
        self.protocolo = protocolo
        
    fundamentacao = TextInput(
        label='Fundamenta√ß√£o da Decis√£o',
        placeholder='Descreva a an√°lise dos documentos e fundamenta√ß√£o legal...',
        style=discord.TextStyle.paragraph,
        required=True,
        max_length=1000
    )

    async def on_submit(self, interaction: discord.Interaction):
        mensagem_confirmacao = (
            f'‚öñÔ∏è **CONFIRMA√á√ÉO DE AN√ÅLISE DOCUMENTAL**\n\n'
            f'**Processo:** {self.protocolo}\n'
            f'**Juiz Relator:** {interaction.user.display_name}\n\n'
            
            f'üîç **VERIFIQUE OS DOCUMENTOS ANEXOS:**\n'
            f'üìã **1. LAUDO PSICOL√ìGICO** - Hospital da Cidade\n'
            f'   ‚Üí Status: [APTID√ÉO/INAPTID√ÉO] ‚úÖ\n'
            f'   ‚Üí Data do exame: [CONFIRMAR] ‚úÖ\n\n'
            
            f'üìã **2. ANTECEDENTES CRIMINAIS** - Pol√≠cia Civil\n'  
            f'   ‚Üí Status: [NADA CONSTA/COM RESTRI√á√ïES] ‚úÖ\n'
            f'   ‚Üí Data da emiss√£o: [CONFIRMAR] ‚úÖ\n\n'
            
            f'üìã **3. DOCUMENTA√á√ÉO PESSOAL**\n'
            f'   ‚Üí Passaporte: [V√ÅLIDO] ‚úÖ\n'
            f'   ‚Üí Comprovantes: [CONFERIDOS] ‚úÖ\n\n'
            
            f'üìù **FUNDAMENTA√á√ÉO:**\n'
            f'_{self.fundamentacao.value}_\n\n'
            
            f'**Selecione a decis√£o abaixo:** ‚¨áÔ∏è'
        )
        
        view = DecisaoView(self.protocolo, self.fundamentacao.value)
        await interaction.response.send_message(mensagem_confirmacao, view=view, ephemeral=False)

# COMANDOS SLASH
@tree.command(name="solicitar_porte", description="üìã Solicitar porte de arma - Tribunal de Justi√ßa")
async def solicitar_porte(interaction: discord.Interaction):
    if not any(role.name in ['Advogado', 'Juiz', 'Promotor'] for role in interaction.user.roles):
        await interaction.response.send_message(
            '‚ùå **ACESSO NEGADO!**\nApenas **Advogados, Ju√≠zes e Promotores** podem solicitar porte.',
            ephemeral=True
        )
        return
    
    await interaction.response.send_modal(PorteModal())

@tree.command(name="analisar_processo", description="‚öñÔ∏è Analisar processo de porte - Apenas Ju√≠zes")
async def analisar_processo(interaction: discord.Interaction, protocolo: str):
    if not any(role.name == 'Juiz' for role in interaction.user.roles):
        await interaction.response.send_message(
            '‚ùå **ACESSO RESTRITO!**\nApenas **Ju√≠zes** podem analisar processos.',
            ephemeral=True
        )
        return
    
    await interaction.response.send_modal(AnaliseModal(protocolo))

@tree.command(name="minhas_permissoes", description="üîê Verificar minhas permiss√µes no sistema")
async def minhas_permissoes(interaction: discord.Interaction):
    cargos_usuario = [role.name for role in interaction.user.roles]
    cargos_permitidos = ['Advogado', 'Juiz', 'Promotor', 'Servidor TJ']
    
    permissoes = []
    for cargo in cargos_usuario:
        if cargo in cargos_permitidos:
            permissoes.append(cargo)
    
    if permissoes:
        await interaction.response.send_message(
            f'‚úÖ **SUAS PERMISS√ïES:**\n' + '\n'.join(f'‚Ä¢ {p}' for p in permissoes),
            ephemeral=True
        )
    else:
        await interaction.response.send_message(
            '‚ùå **VOC√ä N√ÉO TEM PERMISS√ïES**\n'
            'Cargos permitidos: Advogado, Juiz, Promotor, Servidor TJ',
            ephemeral=True
        )

# EVENTOS DO BOT
@bot.event
async def on_ready():
    await tree.sync()
    print(f'‚úÖ Bot {bot.user.name} est√° ONLINE!')
    print('üéØ Sistema TJ-Porte carregado com sucesso!')
    print('‚öñÔ∏è Comandos slash dispon√≠veis!')

# INICIALIZA√á√ÉO
if __name__ == "__main__":
    token = os.getenv('DISCORD_TOKEN')
    if token:
        bot.run(token)
    else:
        print('‚ùå Token n√£o encontrado! Configure a vari√°vel DISCORD_TOKEN')
